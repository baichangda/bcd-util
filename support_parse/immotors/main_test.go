package immotors

import (
	"bcd-util/support_parse/parse"
	"bcd-util/util"
	"encoding/base64"
	"encoding/hex"
	"runtime/debug"
	"strings"
	"testing"
)

func BenchmarkToPacket(b *testing.B) {
	debug.SetGCPercent(1000)
	hexStr
	hexStr = strings.ToUpper(hexStr)
	decodeString, err := hex.DecodeString(hexStr)
	if err != nil {
		b.Fatalf("%+v", err)
	}

	byteBuf := parse.ToByteBuf(decodeString)
	byteBuf.MarkReaderIndex()
	byteBuf.MarkWriterIndex()
	for i := 0; i < b.N; i++ {
		byteBuf.ResetReaderIndex()
		byteBuf.ResetWriterIndex()
		_ = To_Packet(byteBuf)
	}
}

func BenchmarkPacket_Write(b *testing.B) {
	hexStr
	hexStr = strings.ToUpper(hexStr)
	decodeString, err := hex.DecodeString(hexStr)
	if err != nil {
		b.Fatalf("%+v", err)
	}
	byteBuf := parse.ToByteBuf(decodeString)
	packet := To_Packet(byteBuf)
	res := parse.ToByteBuf_capacity(1024)
	res.MarkReaderIndex()
	res.MarkWriterIndex()
	for i := 0; i < b.N; i++ {
		res.ResetReaderIndex()
		res.ResetWriterIndex()
		packet.Write(res)
	}
}

func TestPacket_Write(t *testing.T) {
	hexStr
	hexStr = strings.ToUpper(hexStr)
	decodeString, err := hex.DecodeString(hexStr)
	if err != nil {
		t.Fatalf("%+v", err)
	}
	byteBuf := parse.ToByteBuf(decodeString)
	packet := To_Packet(byteBuf)
	res := parse.ToByteBuf_empty()
	packet.Write(res)

	res_bytes := res.ToBytes()
	res_hex := strings.ToUpper(hex.EncodeToString(res_bytes))
	t.Logf("%s", hexStr)
	t.Logf("%s", res_hex)

	for i := range hexStr {
		if hexStr[i] != res_hex[i] {
			t.Logf("%d %s %s", i,
				hexStr[i-3:i+3], res_hex[i-3:i+3])
			break
		}
	}
	if hexStr != res_hex {
		t.Fail()
	}
}

func TestPacket_Write_base64(t *testing.T) {
	//base64Str := "H4sIAAAAAAAAA+2XT2gcVRzHf7vdJpuYNKKFZqXUqNguUnBmNrubMU3ZNPZSQigE8eKfRPtP20ttvLiISw+luSpoTrp4WvCyaSMuCHH1IHsQ+i7CCpU+ipQ5BvHQhOD4/s57b3az3S0Z6SHzY+bNm/nNewvvs9/f90EM4PynP74LiWdLbubyUdh/xP079vJt6APoBxiA/g3Lb/rbkIz9BiQXBl5/KbFYT8BgNQELpD8MA58XAJIQWyI9kgbsSMZFuw9grASA+uBkKr94qbqU/WB8szJGRiyNxiAeX95eBihBGZ7fhLOxfZvD38FzDbg8faQwd+Gr9RvvPHghsfaQjoQG4BnaFuhlBJMfs/9cCdBT8MeVYpMFLiISWPRov0H6jWKdtTSa5I6fKywPB5n0iopVEuVihQS9q5G2TqJGvuCjNFiWHAuxrxrBnZq5zualpycysXiLRXjGlYe8b4qeh4YgNXQCXmMxBZOsPSFaNExeToFLYooET5EtOgCpUSs7e/b0mcxMLp+xrekZN2fZlmNZeTQCQ1AE+MQvQQreApSCp+cQHP793hjIA43CwTvzX+RujRzejJfAWf+zmt46db2ABuGN2fkzpzM5yx2fm7ftXN5xZ+cdx7Xs6ZydzU/btjvhTpDXjp3PWmTKjJW1886Ea5GHmXHHcshvoM8dm7aZnJt1M3YeOIgLJohHr1IQkwCDDMS7/sPdAfHtdiDe9P8twTf+vVYQD60vf70H4pMCYmXr1LcFwcsi4eUzxcuxVzXhSvuYgRAVL52Fy+uFl6bgBYlVaWjBV5nzggkVWKxeM2gR42SFEdOeFyRmQuKKBRc6dZjN0BC8YI0sFNCCAz4kNYoTj+Wy993zcvJxeLmq83LH3+7My2pa4+W9EC8PNH05TgrdLunLzoWurb5c7J4X+Q9Xa8fXDRm8YI0XtX7NIKpMW1bIWWO8VAUvdcaL1Ck+Gw70RVcpLJ6F9UVm6Jzg4N7TKPJEHo6cl4960pdVoi+/SF7eN3lJvyL0ZVAYoyjr0c76cqx7Y7THS9S83CL6cl/ycs70L+kPDV7u+v9E7V/KMBbTeYlRXt78qY/y8j10xwsWbkKtn+JFeQ7OzYrhOHT/Umlbj+qGC1LUIG1GdW31L4piL6g/WDmVUNszL7p/cbvl5VpvvFB9WRC8nA/xcl3j5TjhZZc2XjvrS9t6JDZe3fCinINyMWFe1BMc8rvy66pQmDKjpcZ0piacrs6dqS9NjQY+Yr2Nf8FBhu5fdMdr6ovuX9yAl8lH60tEvNxOb83EJS8XQrz8QHnp4353F3nptFE39UX3L3u8PBG8EH25L3m5GPIvdVNf4H/YH+3AS1f6ou+M+Np5osKo/XQjqCR0hcsBL63+xdxP6+5F+Re5Sw7vjzgxtYBT5ahUPeJ1qAMnBi+TkfmXpRZeCh14WSP68qLk5VKIl1+FviSZf/mrnd9djV5f+nv3L7pTwC26oOuLucKcmkpATFhfTLdr8tI6Ev9C6ovUI8WJ6XBxcSPgZqNFX6Lj5eOe9GWtQuuR7wP8vPHlgf8A0eC8MkEWAAA="
	base64Str := "H4sIAAAAAAAAA+2XT2gcVRzHf7vdJpuYNKKFZqXUqNguUnBmNrubMU3ZNPZSQigE8eKfRPtP20ttvLiISw+luSpoTrp4WvCyaSMuCHH1IHsQ+i7CCpU+ipQ5BvHQhOD4/s57b3az3S0Z6SHzY+bNm/nNewvvs9/f90EM4PynP74LiWdLbubyUdh/xP079vJt6APoBxiA/g3Lb/rbkIz9BiQXBl5/KbFYT8BgNQELpD8MA58XAJIQWyI9kgbsSMZFuw9grASA+uBkKr94qbqU/WB8szJGRiyNxiAeX95eBihBGZ7fhLOxfZvD38FzDbg8faQwd+Gr9RvvPHghsfaQjoQG4BnaFuhlBJMfs/9cCdBT8MeVYpMFLiISWPRov0H6jWKdtTSa5I6fKywPB5n0iopVEuVihQS9q5G2TqJGvuCjNFiWHAuxrxrBnZq5zualpycysXiLRXjGlYe8b4qeh4YgNXQCXmMxBZOsPSFaNExeToFLYooET5EtOgCpUSs7e/b0mcxMLp+xrekZN2fZlmNZeTQCQ1AE+MQvQQreApSCp+cQHP793hjIA43CwTvzX+RujRzejJfAWf+zmt46db2ABuGN2fkzpzM5yx2fm7ftXN5xZ+cdx7Xs6ZydzU/btjvhTpDXjp3PWmTKjJW1886Ea5GHmXHHcshvoM8dm7aZnJt1M3YeOIgLJohHr1IQkwCDDMS7/sPdAfHtdiDe9P8twTf+vVYQD60vf70H4pMCYmXr1LcFwcsi4eUzxcuxVzXhSvuYgRAVL52Fy+uFl6bgBYlVaWjBV5nzggkVWKxeM2gR42SFEdOeFyRmQuKKBRc6dZjN0BC8YI0sFNCCAz4kNYoTj+Wy993zcvJxeLmq83LH3+7My2pa4+W9EC8PNH05TgrdLunLzoWurb5c7J4X+Q9Xa8fXDRm8YI0XtX7NIKpMW1bIWWO8VAUvdcaL1Ck+Gw70RVcpLJ6F9UVm6Jzg4N7TKPJEHo6cl4960pdVoi+/SF7eN3lJvyL0ZVAYoyjr0c76cqx7Y7THS9S83CL6cl/ycs70L+kPDV7u+v9E7V/KMBbTeYlRXt78qY/y8j10xwsWbkKtn+JFeQ7OzYrhOHT/Umlbj+qGC1LUIG1GdW31L4piL6g/WDmVUNszL7p/cbvl5VpvvFB9WRC8nA/xcl3j5TjhZZc2XjvrS9t6JDZe3fCinINyMWFe1BMc8rvy66pQmDKjpcZ0piacrs6dqS9NjQY+Yr2Nf8FBhu5fdMdr6ovuX9yAl8lH60tEvNxOb83EJS8XQrz8QHnp4353F3nptFE39UX3L3u8PBG8EH25L3m5GPIvdVNf4H/YH+3AS1f6ou+M+Np5osKo/XQjqCR0hcsBL63+xdxP6+5F+Re5Sw7vjzgxtYBT5ahUPeJ1qAMnBi+TkfmXpRZeCh14WSP68qLk5VKIl1+FviSZf/mrnd9djV5f+nv3L7pTwC26oOuLucKcmkpATFhfTLdr8tI6Ev9C6ovUI8WJ6XBxcSPgZqNFX6Lj5eOe9GWtQuuR7wP8vPHlgf8A0eC8MkEWAAA="
	bytes, err := base64.StdEncoding.DecodeString(base64Str)
	if err != nil {
		t.Fatalf("%+v", err)
	}
	unGzip, err := util.UnGzip(bytes)
	if err != nil {
		t.Fatalf("%+v", err)
	}
	hexStr := strings.ToUpper(hex.EncodeToString(unGzip))
	decodeString, err := hex.DecodeString(hexStr)
	if err != nil {
		t.Fatalf("%+v", err)
	}
	byteBuf := parse.ToByteBuf(decodeString)
	packets := To_Packets(byteBuf)
	res := parse.ToByteBuf_empty()
	Write_Packets(packets, res)
	res_bytes := res.ToBytes()
	res_hex := strings.ToUpper(hex.EncodeToString(res_bytes))
	t.Logf("%s", hexStr)
	t.Logf("%s", res_hex)

	for i := range hexStr {
		if hexStr[i] != res_hex[i] {
			t.Logf("%d %s %s", i,
				hexStr[i:i+1], res_hex[i:i+1])
			break
		}
	}
	if hexStr != res_hex {
		t.Fail()
	}
}

func TestPerformance_parse(t *testing.T) {
	debug.SetGCPercent(1000)
	hexStr
	hexStr = strings.ToUpper(hexStr)
	decodeString, err := hex.DecodeString(hexStr)
	if err != nil {
		t.Fatalf("%+v", err)
	}
	parse.TestMultiThreadPerformance_parse(decodeString, 1, 1000000000, func(byteBuf *parse.ByteBuf) {
		To_Packets(byteBuf)
		//util.Log.Infof("%d", byteBuf.ReaderIndex())
	})
}

func TestPerformance_deParse(t *testing.T) {
	hexStr
	hexStr = strings.ToUpper(hexStr)
	decodeString, err := hex.DecodeString(hexStr)
	if err != nil {
		t.Fatalf("%+v", err)
	}
	packet := To_Packet(parse.ToByteBuf(decodeString))
	buf := parse.ToByteBuf_capacity(1024)
	parse.TestMultiThreadPerformance_deParse(buf, 1, 1000000000, func(byteBuf *parse.ByteBuf) {
		packet.Write(byteBuf)
		//util.Log.Infof("%d", byteBuf.WriterIndex())
	})
}
