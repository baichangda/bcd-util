package immotors

import (
	"bcd-util/support_parse/parse"
	"bcd-util/util"
	"encoding/base64"
	"encoding/hex"
	"runtime/debug"
	"strings"
	"testing"
)

func BenchmarkToPacket(b *testing.B) {
	debug.SetGCPercent(1000)
	hexStr
	hexStr = strings.ToUpper(hexStr)
	decodeString, err := hex.DecodeString(hexStr)
	if err != nil {
		b.Fatalf("%+v", err)
	}

	byteBuf := parse.ToByteBuf(decodeString)
	byteBuf.MarkReaderIndex()
	byteBuf.MarkWriterIndex()
	for i := 0; i < b.N; i++ {
		byteBuf.ResetReaderIndex()
		byteBuf.ResetWriterIndex()
		_ = To_Packet(byteBuf, nil)
	}
}

func BenchmarkPacket_Write(b *testing.B) {
	hexStr
	hexStr = strings.ToUpper(hexStr)
	decodeString, err := hex.DecodeString(hexStr)
	if err != nil {
		b.Fatalf("%+v", err)
	}
	byteBuf := parse.ToByteBuf(decodeString)
	packet := To_Packet(byteBuf, nil)
	res := parse.ToByteBuf_capacity(1024)
	res.MarkReaderIndex()
	res.MarkWriterIndex()
	for i := 0; i < b.N; i++ {
		res.ResetReaderIndex()
		res.ResetWriterIndex()
		packet.Write(res, nil)
	}
}

func TestPacket_Write(t *testing.T) {
	hexStr
	//hexStr
	hexStr = strings.ToUpper(hexStr)
	decodeString, err := hex.DecodeString(hexStr)
	if err != nil {
		t.Fatalf("%+v", err)
	}
	byteBuf := parse.ToByteBuf(decodeString)
	packet := To_Packet(byteBuf, nil)
	if err != nil {
		t.Fatalf("%+v", err)
	}
	res := parse.ToByteBuf_empty()
	packet.Write(res, nil)

	res_bytes := res.ToBytes()
	res_hex := strings.ToUpper(hex.EncodeToString(res_bytes))
	t.Logf("%s", hexStr)
	t.Logf("%s", res_hex)

	for i := range hexStr {
		if hexStr[i] != res_hex[i] {
			t.Logf("%d %s %s", i,
				hexStr[i:i+1], res_hex[i:i+1])
			break
		}
	}
	if hexStr != res_hex {
		t.Fail()
	}
}

func TestPacket_Write_base64(t *testing.T) {
	base64Str := "H4sIAAAAAAAAA+2YXWgcVRTHz+xutpPNJhlblVn86LVg2bbQTGeT7G5Ndme28aEScZugplClSgpiHpqHPhh8cBJTXGVRURFRLD4UIha/oMXKbszWxFZrpSMBKQplEUtqH6TVrMSYdL3zdecj7kfTjRLI3NyZO/fcM7PM+Z3/uQQogAN9Z9vBDfhwN4NnQwoPXFCHz9SLx8AL7hnlb93VZDFXTAFNnQNqXADf2EhfP17TqKwDkL0Qq4sMi1sQ90wb9T4UF0BiKeiA4cWF4nUJ8oAoGKQa/p67BSgau2w8dXBy5nU4knjPc0J5Ncj1sB6gQR1Dcx6fvPjZcgN80z/EDtFDCHcGN5Z0hM9Kp/WxZlXG7FAQN2VOOSOb1fBmbTNI90L6E7V7ZcacZXQf7Yp0b1b/deY9Ik9nyFi1yH4I+OPw701uxEZBHQrgvMpNEGC5tu7k/bvadoXCoRAndom9HM+1ca1huRn8H0p9MAwSBGAAZBZupTe8nNqTFt9OSl9de/rqJwAIf8sAMN+1TF0sbANyyHeBH2Cv+tnpg9txaKgD6pjS7LQLoFjEVzdQ7fh+2gtfgOPwPEFBbvOzPsH1xwux9fvSsV/ij4uznSnd+pMLhNOFj4WT3740sedOKX7py4cSv30Q1q0XXDAxMjsu3v4pZAbqk5m9vwqJc/Np3fqZC0Rv/5PCG6/w4xcG62Mn9+cnN+0+plun8XvveGeTuD1Qn3nMk8r6Fl9NnDi8WbfmKZjwjv4gJrZu2xlJ57JnpblJ5srlaYB7FdSzPb75zI8d92Te3d2jeVDFLPvmI52fH+qCTO7oz9BU59Hm1RQJV0iN0SpSY7B8ajAkNabWvSY5U8NTk9RAttRgdV8zHayQI+LFWtII6XNmaliTirX5VJcaeLyCqXFNQjBSKjV+P2pJjdMXC1vRslPDwUukDC/dxamqpLQCL80AlzVeTs1UywtDeKFJvJRIAJE4VrWZETN5MeWRscTRGCFH7I21BmdBvZu82Jk1eQla3m6uRtaVFl6EFeDl+VK8zL5FeHmw5UyssEWoFS/RCvoi6bzA8ktvk50XoZrSy6hk0CTSRgRoGwk3xgtj4QXZGqP62fUluKT0sqQxFXhBN8tLvLrSW5KXP9MWXs5jXvYvjxdpCS87y+pLdVs1rC9juaW8bPxL46WR8DI5punL8bnK+lI9L8ySemREm7F42nkxt2pBi74wRF/MdzIWElji+//zoujLaCle5iQLL/LdhWC+VrzcV1ZfjhN9uZGt/SKAVV/wz/u6tL64K/LijBNLahRt4cG5f7FXIae+GJVHa7TKC0t4MXYpjKNbdyoGL8iiOna6mRXl5TmJhcOleJk/5OClZvrSUaEepdd4WYW8LDxFeGlsOX+khrx0VlmPpDVeVhEv1/etFC+xCrwY+pJb42X18DIASZMXDm675Ec6LdTN8hIvW4+y5P8v/x0vPni4u/eBR3tauWg42YtP4dZIdy8fEneExSjfziV4LhyJRtq5KB8KRziO4/nIjgjfChWONRBrAKKryw5iwPi6ywdRmTvz0fdX/gFfv1hWNBcAAA=="
	bytes, err := base64.StdEncoding.DecodeString(base64Str)
	if err != nil {
		t.Fatalf("%+v", err)
	}
	unGzip, err := util.UnGzip(bytes)
	if err != nil {
		t.Fatalf("%+v", err)
	}
	hexStr := strings.ToUpper(hex.EncodeToString(unGzip))
	decodeString, err := hex.DecodeString(hexStr)
	if err != nil {
		t.Fatalf("%+v", err)
	}
	byteBuf := parse.ToByteBuf(decodeString)
	packet := To_Packet(byteBuf, nil)
	res := parse.ToByteBuf_empty()
	packet.Write(res, nil)

	res_bytes := res.ToBytes()
	res_hex := strings.ToUpper(hex.EncodeToString(res_bytes))
	t.Logf("%s", hexStr)
	t.Logf("%s", res_hex)

	for i := range hexStr {
		if hexStr[i] != res_hex[i] {
			t.Logf("%d %s %s", i,
				hexStr[i:i+1], res_hex[i:i+1])
			break
		}
	}
	if hexStr != res_hex {
		t.Fail()
	}
}

func TestPerformance_parse(t *testing.T) {
	debug.SetGCPercent(1000)
	hexStr
	hexStr = strings.ToUpper(hexStr)
	decodeString, err := hex.DecodeString(hexStr)
	if err != nil {
		t.Fatalf("%+v", err)
	}
	parse.TestMultiThreadPerformance_parse(decodeString, 1, 1000000000, func(byteBuf *parse.ByteBuf) {
		To_Packet(byteBuf, nil)
		//util.Log.Infof("%d", byteBuf.ReaderIndex())
	})
}

func TestPerformance_deParse(t *testing.T) {
	hexStr
	hexStr = strings.ToUpper(hexStr)
	decodeString, err := hex.DecodeString(hexStr)
	if err != nil {
		t.Fatalf("%+v", err)
	}
	packet := To_Packet(parse.ToByteBuf(decodeString), nil)
	buf := parse.ToByteBuf_capacity(1024)
	parse.TestMultiThreadPerformance_deParse(buf, 1, 1000000000, func(byteBuf *parse.ByteBuf) {
		packet.Write(byteBuf, nil)
		//util.Log.Infof("%d", byteBuf.WriterIndex())
	})
}
