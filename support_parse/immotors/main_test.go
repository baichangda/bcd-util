package immotors

import (
	"bcd-util/support_parse/parse"
	"bcd-util/util"
	"encoding/base64"
	"encoding/hex"
	"runtime/debug"
	"strings"
	"testing"
)

func BenchmarkToPacket(b *testing.B) {
	debug.SetGCPercent(1000)
	hexStr
	hexStr = strings.ToUpper(hexStr)
	decodeString, err := hex.DecodeString(hexStr)
	if err != nil {
		b.Fatalf("%+v", err)
	}

	byteBuf := parse.ToByteBuf(decodeString)
	byteBuf.MarkReaderIndex()
	byteBuf.MarkWriterIndex()
	for i := 0; i < b.N; i++ {
		byteBuf.ResetReaderIndex()
		byteBuf.ResetWriterIndex()
		_ = To_Packet(byteBuf, nil)
	}
}

func BenchmarkPacket_Write(b *testing.B) {
	hexStr
	hexStr = strings.ToUpper(hexStr)
	decodeString, err := hex.DecodeString(hexStr)
	if err != nil {
		b.Fatalf("%+v", err)
	}
	byteBuf := parse.ToByteBuf(decodeString)
	packet := To_Packet(byteBuf, nil)
	res := parse.ToByteBuf_capacity(1024)
	res.MarkReaderIndex()
	res.MarkWriterIndex()
	for i := 0; i < b.N; i++ {
		res.ResetReaderIndex()
		res.ResetWriterIndex()
		packet.Write(res, nil)
	}
}

func TestPacket_Write(t *testing.T) {
	hexStr
	//hexStr
	hexStr = strings.ToUpper(hexStr)
	decodeString, err := hex.DecodeString(hexStr)
	if err != nil {
		t.Fatalf("%+v", err)
	}
	byteBuf := parse.ToByteBuf(decodeString)
	packet := To_Packet(byteBuf, nil)
	if err != nil {
		t.Fatalf("%+v", err)
	}
	res := parse.ToByteBuf_empty()
	packet.Write(res, nil)

	res_bytes := res.ToBytes()
	res_hex := strings.ToUpper(hex.EncodeToString(res_bytes))
	t.Logf("%s", hexStr)
	t.Logf("%s", res_hex)

	for i := range hexStr {
		if hexStr[i] != res_hex[i] {
			t.Logf("%d %s %s", i,
				hexStr[i:i+1], res_hex[i:i+1])
			break
		}
	}
	if hexStr != res_hex {
		t.Fail()
	}
}

func TestPacket_Write_base64(t *testing.T) {
	base64Str := "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"
	bytes, err := base64.StdEncoding.DecodeString(base64Str)
	if err != nil {
		t.Fatalf("%+v", err)
	}
	unGzip, err := util.UnGzip(bytes)
	if err != nil {
		t.Fatalf("%+v", err)
	}
	hexStr := strings.ToUpper(hex.EncodeToString(unGzip))
	decodeString, err := hex.DecodeString(hexStr)
	if err != nil {
		t.Fatalf("%+v", err)
	}
	byteBuf := parse.ToByteBuf(decodeString)
	packet := To_Packet(byteBuf, nil)
	res := parse.ToByteBuf_empty()
	packet.Write(res, nil)

	res_bytes := res.ToBytes()
	res_hex := strings.ToUpper(hex.EncodeToString(res_bytes))
	t.Logf("%s", hexStr)
	t.Logf("%s", res_hex)

	for i := range hexStr {
		if hexStr[i] != res_hex[i] {
			t.Logf("%d %s %s", i,
				hexStr[i:i+1], res_hex[i:i+1])
			break
		}
	}
	if hexStr != res_hex {
		t.Fail()
	}
}

func TestPerformance_parse(t *testing.T) {
	debug.SetGCPercent(1000)
	hexStr
	hexStr = strings.ToUpper(hexStr)
	decodeString, err := hex.DecodeString(hexStr)
	if err != nil {
		t.Fatalf("%+v", err)
	}
	parse.TestMultiThreadPerformance_parse(decodeString, 1, 1000000000, func(byteBuf *parse.ByteBuf) {
		To_Packet(byteBuf, nil)
		//util.Log.Infof("%d", byteBuf.ReaderIndex())
	})
}

func TestPerformance_deParse(t *testing.T) {
	hexStr
	hexStr = strings.ToUpper(hexStr)
	decodeString, err := hex.DecodeString(hexStr)
	if err != nil {
		t.Fatalf("%+v", err)
	}
	packet := To_Packet(parse.ToByteBuf(decodeString), nil)
	buf := parse.ToByteBuf_capacity(1024)
	parse.TestMultiThreadPerformance_deParse(buf, 1, 1000000000, func(byteBuf *parse.ByteBuf) {
		packet.Write(byteBuf, nil)
		//util.Log.Infof("%d", byteBuf.WriterIndex())
	})
}
