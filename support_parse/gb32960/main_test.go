package gb32960

import (
	"bcd-util/support_parse/parse"
	"bcd-util/util"
	"encoding/hex"
	"strings"
	"testing"
)

func BenchmarkToPacket(b *testing.B) {
	//debug.SetGCPercent(400)
	//hexStr := "232303FE4C534A41323430333048533139323936390101351403190F0507010203010000000469B00EE5271055020F1FFF000002010103424E1E4E2045FFFF2710050006BE437001CF306A060160FFFF0101FFFF0118FF01010E070000000000000000000801010EE527100060000160FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF09010100180EFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFED"
	hexStr
	hexStr = strings.ToUpper(hexStr)
	decodeString, err := hex.DecodeString(hexStr)
	if err != nil {
		b.Fatalf("%+v", err)
	}
	byteBuf := parse.ToByteBuf(decodeString)
	byteBuf.MarkReaderIndex()
	byteBuf.MarkWriterIndex()
	for i := 0; i < b.N; i++ {
		byteBuf.ResetReaderIndex()
		byteBuf.ResetWriterIndex()
		_ = To_Packet(byteBuf)
	}
}

func BenchmarkPacket_Write(b *testing.B) {
	//hexStr := "232303FE4C534A41323430333048533139323936390101351403190F0507010203010000000469B00EE5271055020F1FFF000002010103424E1E4E2045FFFF2710050006BE437001CF306A060160FFFF0101FFFF0118FF01010E070000000000000000000801010EE527100060000160FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF09010100180EFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFED"
	//hexStr
	hexStr

	hexStr = strings.ToUpper(hexStr)
	decodeString, err := hex.DecodeString(hexStr)
	if err != nil {
		b.Fatalf("%+v", err)
	}
	byteBuf := parse.ToByteBuf(decodeString)
	packet := To_Packet(byteBuf)
	res := parse.ToByteBuf_capacity(1024)
	res.MarkReaderIndex()
	res.MarkWriterIndex()
	for i := 0; i < b.N; i++ {
		res.ResetReaderIndex()
		res.ResetWriterIndex()
		packet.Write(res)
	}
}

func TestPacket_Write(t *testing.T) {
	//hexStr := "232301FE4C534A574C34303933505330333838353801001E17060F091211000138393836303932323738303030333936343832350000B6"
	//hexStr := "232302fe4c534a4533363039364d53313430343935010141170a1b0f1927010103010040000003520f2827811c012e2000000002010101594fdb4e2f4a0f3227100500073944e501dd620a0601090e1b01370e14010145010444070300021387000000000801010f282781006c00016c0e180e190e1a0e190e190e180e180e1a0e1b0e180e190e1a0e180e180e190e1a0e1a0e190e180e1a0e180e1a0e1a0e180e170e190e170e190e170e190e1b0e190e190e190e180e180e170e170e180e170e170e170e190e170e180e170e190e170e170e170e180e180e190e190e140e180e180e170e170e150e160e160e180e190e170e180e170e180e170e180e170e160e190e150e180e160e180e170e160e160e170e150e170e170e140e170e160e160e170e170e170e170e160e170e160e170e140e170e170e160e160e170e170e170e160e160e160e16090101000c454545444544444445444544f5"
	//hexStr := "232302fe4c534a4533363039364d5331343034393501014d170608103933010103010000001726ae10fc275154011f20000000020201044c4e204e1b431108271002044b4e204e204511082710050007390f7b01dd636e0601200fc101020fb901013e01023c0703000217870000000008010110fc2751006c00016c0fbf0fb90fbf0fbd0fbf0fbb0fbf0fbd0fc00fbc0fc00fbb0fba0fbb0fbb0fbb0fbd0fb90fbb0fbc0fbb0fbd0fbc0fbe0fba0fbf0fbe0fc00fbd0fbe0fbc0fc10fbe0fbd0fbb0fbf0fbe0fb90fbe0fbc0fbe0fbc0fb90fb90fbe0fbd0fbf0fbd0fbe0fbc0fc00fbc0fbf0fbd0fbd0fbf0fbc0fbe0fbe0fbe0fbd0fc00fbe0fbd0fbd0fbf0fbf0fc00fc00fc00fbf0fc10fbe0fbc0fbf0fbe0fbf0fbc0fbf0fbd0fc10fbe0fbe0fbb0fbf0fbe0fbf0fbd0fc10fbc0fbc0fbf0fbc0fc00fbf0fbe0fbd0fbe0fbf0fbf0fbd0fc10fbf0fbf0fbe0fc00fbc0fc1090101000c3e3c3c3c3e3c3c3c3d3c3c3c1f"
	//hexStr := "232301FE4C534A574C34303933505330333838353801001E17060A0A0301000138393836303932323738303030333936343832350000B1"
	//hexStr := "232301FE4C534A4533363039584D5331343035303201001E17080B0B122A00013839383630393231373530303038393532333831000095"
	//hexStr
	hexStr := "232302024c534a574d3430393850533037373131380100061803140b10386a"
	hexStr = strings.ToUpper(hexStr)
	decodeString, err := hex.DecodeString(hexStr)
	if err != nil {
		t.Fatalf("%+v", err)
	}
	byteBuf := parse.ToByteBuf(decodeString)
	packet := To_Packet(byteBuf)
	res := parse.ToByteBuf_empty()
	packet.Write(res)
	res_bytes := res.ToBytes()
	res_hex := strings.ToUpper(hex.EncodeToString(res_bytes))
	t.Logf("%s", hexStr)
	t.Logf("%s", res_hex)
	if hexStr != res_hex {
		t.Fail()
	}
}

func TestPerformance_parse(t *testing.T) {
	util.StartWeb_pprof()
	//debug.SetGCPercent(400)
	hexStr := "232303FE4C534A41323430333048533139323936390101351403190F0507010203010000000469B00EE5271055020F1FFF000002010103424E1E4E2045FFFF2710050006BE437001CF306A060160FFFF0101FFFF0118FF01010E070000000000000000000801010EE527100060000160FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF09010100180EFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFED"
	hexStr = strings.ToUpper(hexStr)
	decodeString, err := hex.DecodeString(hexStr)
	if err != nil {
		t.Fatalf("%+v", err)
	}
	parse.TestMultiThreadPerformance_parse(decodeString, 1, 1000000000, func(byteBuf *parse.ByteBuf) {
		To_Packet(byteBuf)
		//util.Log.Infof("%d", byteBuf.ReaderIndex())
	})
}

func TestPerformance_deParse(t *testing.T) {
	hexStr := "232303FE4C534A41323430333048533139323936390101351403190F0507010203010000000469B00EE5271055020F1FFF000002010103424E1E4E2045FFFF2710050006BE437001CF306A060160FFFF0101FFFF0118FF01010E070000000000000000000801010EE527100060000160FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF09010100180EFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFED"
	hexStr = strings.ToUpper(hexStr)
	decodeString, err := hex.DecodeString(hexStr)
	if err != nil {
		t.Fatalf("%+v", err)
	}
	packet := To_Packet(parse.ToByteBuf(decodeString))
	buf := parse.ToByteBuf_capacity(1024)
	parse.TestMultiThreadPerformance_deParse(buf, 1, 1000000000, func(byteBuf *parse.ByteBuf) {
		packet.Write(byteBuf)
		//util.Log.Infof("%d", byteBuf.WriterIndex())
	})
}

func Test123(t *testing.T) {
	var n int8 = -100
	t.Log(int16(n))
}
